<template>
  <scroll-view style="height: {{height + 'px'}}" scroll-y bindscrolltolower='loadmore' class='body-wrapper'>
    <view class="index-container">
      <image class="banner" src='../assets/index/banner.png'></image>
      <view class="header">
        <view class="logo-wrapper">
          <image src='../assets/index/logo.png' class='logo'></image>
        </view>
        <view class='search-wrapper'>
          <input type="text" placeholder="搜索职位" class='input-inner' @change="change('post', 'params', 'params')"/>
          <image class='search-icon' src='../assets/index/search.png'></image>
        </view>
      </view>
    </view>
    <view class='mode-wrapper'>
      <view class="mode-item" :class="{'active-mode': mode === 'job'}" @tap="setMode('job')">查看岗位</view>
      <view class="mode-item" :class="{'active-mode': mode === 'resume'}" @tap="setMode('resume')">浏览简历</view>
    </view>
    <view class='index-container' hidden="{{mode !== 'job'}}">
      <view class='action'>
        <view class='action-item'>
          <picker @change="change('type', 'types', 'params')" class='weui-input' range="{{types}}">
            <text>{{params.type}}</text>
            <image src='../assets/index/arrow-down.png'></image>
          </picker>
        </view>
        <view class='action-item gray'>
          <text>薪酬优先</text>
        </view>
        <!-- <view class='action-item gray'>
          <text>时间优先</text>
        </view>
 -->        <view class="action-item gray">
          <text>筛选</text>
          <image src='../assets/index/arrow-down.png'></image>
        </view>
      </view>
    </view>
    <view class='index-container' hidden="{{mode !== 'job'}}">
      <repeat for="{{jobs}}" item='job' key='index'>
        <view class="jobs">
          <job :job="job" :labels="labels"></job>
        </view>
      </repeat>
    </view>
    <view class="index-container" hidden="{{mode !== 'resume'}}">
      <view class='action'>
        <view class='action-item'>
          <picker @change="change('type', 'types', 'resumeParams')" class='weui-input' range="{{types}}">
            <text>{{resumeParams.type}}</text>
            <image src='../assets/index/arrow-down.png'></image>
          </picker>
        </view>
        <!-- <view class='action-item gray'>
          <text>工资</text>
        </view>
 -->        <view class='action-item'>
          <picker @change="change('education', 'educations', 'resumeParams')" class='weui-input' range="{{educations}}">
            <text>{{resumeParams.education || '学历'}}</text>
            <image src='../assets/index/arrow-down.png'></image>
          </picker>
        </view>
        <!-- <view class="action-item gray">
          <text>筛选</text>
          <image src='../assets/index/arrow-down.png'></image>
        </view>
 -->      </view>
    </view>
    <view class="index-container" hidden="{{mode !== 'resume'}}">
      <repeat for="{{resumes}}" item='resume' key='index' index='index'>
        <view class="jobs">
          <resume :resume.sync="resume" :hire="hire"></resume>
        </view>
      </repeat>
    </view>
  </scroll-view>
</template>

<script>
import wepy from 'wepy'
import job from '../components/job'
import resume from '../components/resume-item'
import { getJobList, getResumeList } from '../api'

export default class Index extends wepy.page {
  config = {
    navigationBarTitleText: '求职'
  }
  components = {
    job,
    resume
  }
  data = {
    jobs: [],
    hire: true,
    labels: {
      industry: '行业',
      contact: '联系人',
      post: '职位',
      tel: '联系电话'
    },
    educations: ['大专', '本科', '硕士', '博士', '无', '不限'],
    resumes: [],
    height: 1000,
    params: {
      limit: 10,
      offset: 0,
      post: '',
      type: '兼职'
    },
    resumeParams: {
      limit: 10,
      offset: 0,
      education: undefined
    },
    types: ['兼职', '实习'],
    mode: 'job'
  }
  methods = {
    change(key, target, param, e) {
      if (target === 'params') {
        this[param][key] = e.detail.value
      } else {
        this[param][key] = this[target][e.detail.value]
      }
      if (param === 'resumeParams') {
        this.getResumes(true)
      } else {
        this.getJobs(true)
      }
      if (key === 'post') {
        this.mode = 'job'
        this.$apply()
      }
    },
    loadmore(e) {
      if (this.jobs && this.jobs.length >= this.total) {
        return
      }
      if (this.fetching) {
        return
      }
      this.fetching = true
      this.getJobs().then(() => {
        this.fetching = false
      })
    },
    setMode(mode) {
      this.mode = mode
      if (mode === 'resume' && (!this.resumes || !this.resumes.length)) {
        this.getResumes(true)
      }
      this.$apply()
    }
  }
  getResumes(refresh = false) {
    if (refresh) {
      this.resumes = []
    }
    wx.showLoading()
    this.resumeParams.offset = this.resumes.length
    getResumeList(this.resumeParams).then(data => {
      this.resumes = data.rows || []
      this.resumeTotal = data.total
      wx.hideLoading()
      this.$apply()
    })
  }
  getJobs(refresh = false) {
    if (refresh) {
      this.jobs = []
    }
    wx.showLoading()
    this.params.offset = this.jobs.length
    return new Promise(resolve => {
      getJobList(this.params).then(data => {
        if (!data.rows) {
          this.$parent.globalData.userInfo = null
          wx.removeStorageSync('userInfo')
          this.getUserInfo()
        }
        this.total = data.total
        data.rows.forEach(item => {
          item.date = (item.updatetime || item.creationtime || '').substr(5, 5)
          item.avatar = item.img
        })
        this.jobs = this.jobs.concat(data.rows)
        wx.hideLoading()
        this.$apply()
        resolve()
      })
    })
  }
  getUserInfo() {
    this.$parent.getUserInfo().then(userInfo => {
      this.userInfo = userInfo
      this.getJobs(true)
    }).catch(() => {
      this.$parent.globalData.userInfo = null
      wx.removeStorageSync('userInfo')
      this.$parent.getUserInfo()
    })
  }
  onReady () {
    const height = wx.getSystemInfoSync().windowHeight
    this.height = height
    this.$apply()
    this.getUserInfo()
  }
}
</script>

<style lang="scss">
page {
  background: #f5f5f4;
  overflow: hidden;
}
.index-container {
  font-size: 24rpx;
  position: relative;
  .banner {
    width: 750rpx;
    height: 304rpx;
  }
  .header {
    position: absolute;
    top: 24rpx;
    left: 34rpx;
    width: 676rpx;
    display: flex;
    height: 74rpx;
  }
  .logo-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    .logo {
      width: 48rpx;
      height: 48rpx;
      display: flex;
      margin-right: 16rpx;
      vertical-align: middle;
    }
  }
  .search-wrapper {
    vertical-align: middle;
    flex: 1;
    background: rgba(0, 0, 0, .5);
    display: flex;
    align-items: center;
    border-radius: 6rpx;
    padding-left: 20rpx;
    .input-inner {
      font-size: 30rpx;
      height: 100%;
      background: transparent;
      border: none;
      outline: 0;
      color: rgba(255, 255, 255, 0.8);
      flex: 1;
    }
    .search-icon {
      margin-left: 24rpx;
      margin-right: 24rpx;
      width: 32rpx;
      height: 32rpx;
    }
  }
  .action {
    background: #fff;
    height: 72rpx;
    display: flex;
    flex-direction: row;
    width: 100%;
    align-items: center;
    border-bottom: 1rpx solid rgba(0,0,0, .1);
    justify-content: space-around;
    .action-item text {
      vertical-align: middle;
    }
    .action-item image{
      margin-left: 4rpx;
      width: 26rpx;
      height: 26rpx;
      vertical-align: middle;
    }
  }
  .jobs {
    width: 100%;
  }
}
.mode-wrapper {
  display: flex;
  .mode-item {
    width: 50%;
    height: 100rpx;
    line-height: 100rpx;
    font-size: 36rpx;
    color: #9b9b9b;
    background: #f4f4f5;
    text-align: center;
    transition: all 0.3s;
    &.active-mode {
      background: #fff;
      color: #3a8ef0;
    }
  }
}
.gray {
  color: #c7c7cd;
}
</style>
