<template>
  <view class="container">
    <view class="avatar-wrapper">
      <image class="avatar" mode="aspectFit" src="{{info.imgArray && info.imgArray[0]}}"></image>
    </view>
   <!--  <view class="info-wrapper">
      <text class="block">{{info.username}}</text>
      <view class='flex'>
        <text class="sex">{{info.sex}}</text>
        <text class="birth">{{info.birthday}}</text>
        <text class="education">{{info.education}}</text>
        <text class="major">{{info.specialty}}专业</text>
      </view>
      <view class='flex'>
        <text class="school">{{info.school}}</text>
      </view>
      <view class='flex'>
        <text class="tel">{{info.tel}}</text>
        <text class="email">{{info.email}}</text>
      </view>
    </view> -->
    <view class="info-wrapper">
      <text class="block">{{info.username || '无'}}</text>
      <view class="flex c-flex">
        <view class="flex-left">
          <view class="text-item">
            <image src="../assets/profile/peoplePen.png"></image>
            <text>{{info.sex || ''}}</text>
          </view>
          <view class="text-item">
            <image src="../assets/profile/book.png"></image>
            <text>{{info.specialty || ''}}</text>
          </view>
          <view class="text-item">
            <image src="../assets/profile/keypad.png"></image>
            <text>{{info.tel || ''}}</text>
          </view>
        </view>
        <view class="flex-right">
          <view class="text-item">
            <image src="../assets/profile/swim.png"></image>
            <text>{{info.education || ''}}</text>
          </view>
          <view class="text-item">
            <image src="../assets/profile/info.png"></image>
            <text>{{info.school || ''}}</text>
          </view>
        </view>
      </view>
      <view class="flex c-flex" style="margin-top: -2rpx; margin-left:-2rpx;">
        <view class="text-item">
          <image src="../assets/profile/send.png"></image>
          <text>{{info.email || ''}}</text>
        </view>
      </view>
    </view>
    <view class="info-wrapper block-wrapper">
      <view class="text-wrapper">
        <text class="block gray">能力评价</text>
      </view>
      <view class='flex flex-center' style='padding-top: 60rpx; padding-bottom: 60rpx; position: relative'>
        <canvas canvas-id="firstCanvas" style="width: 320rpx; height: 320rpx;"></canvas>
        <repeat for={{labels}} key='index'>
          <view class="absolute" style="left: {{item.left}}; top: {{item.top}}">{{item.label || ''}}</view>
        </repeat>
      </view>
    </view>
    <view class="info-wrapper block-wrapper">
      <view class='text-wrapper'>
        <text class="block hope gray">期待工作日（每周）</text>
      </view>
      <view class="day-wrapper">
        <repeat for={{days}} key="item">
          <text :class="{highlight: item.highlight}">{{item.day || ''}}</text>
        </repeat>
      </view>
      <view class='text-wrapper'>
        <text class="block hope gray" style='margin-top: 16rpx'>兼职类型</text>
      </view>
      <view style='text-align: center; margin-top: 16rpx;'>
        <text>{{info.job || ''}}</text>
      </view>
    </view>

    <view class="info-wrapper block-wrapper" hidden="{{!skills || !skills.length}}">
      <view class='text-wrapper'>
        <text class="block hope gray">个人技能</text>
      </view>
      <view class='skill-wrapper'>
        <repeat for={{skills}} key="index">
          <view class='skill'>
            <view>{{item.label}}</view>
            <view class='star-wrapper'>
              <repeat for={{item.value}} key="index">
                <text class='star'>⭐</text>
              </repeat>
            </view>
          </view>
        </repeat>
      </view>
    </view>
    <view class="info-wrapper block-wrapper" hidden="{{!info.information}}">
      <view class='text-wrapper'>
        <text class="block hope gray">自我评价</text>
      </view>
      <view style='text-indent: 2em;padding: 16rpx 0'>
        <text>{{info.information || ''}}</text>
      </view>
    </view>
    <view class="footer-wrapper" wx:if={{!hire}}>
      <button type='primary' class='primary' @tap='edit'>编辑简历</button>
    </view>
    <view class="footer-wrapper" wx:else>
      <picker range={{jobs}} range-key="title" @change="hire" wx:if="{{presetOid === null || presetOid === undefined}}">
        <button type='primary' class='primary' style="width: 680rpx">招募</button>
      </picker>
      <view @tap="hire" wx:else>
        <button type='primary' class="primary" style="width: 680rpx">招募</button>
      </view>
    </view>
    <!-- <toast /> -->
  </view>
</template>

<script>
import wepy from 'wepy'
import { getResume, addRecruit, hire, getJobListPersonally } from '../api'
import { eventEmitter } from 'lv-util'

export default class Resume extends wepy.page {
  config = {
    navigationBarTitleText: '简历'
  }

  data = {
    info: {},
    days: [],
    labels: [{
      label: '诚信守时',
      left: '228rpx',
      top: '15rpx'
    }, {
      label: '工作效率',
      left: '442rpx',
      top: '140rpx'
    }, {
      label: '沟通能力',
      left: '314rpx',
      top: '362rpx'
    }, {
      label: '专业技能',
      left: '122rpx',
      top: '362rpx'
    }, {
      label: '工作态度',
      left: '14rpx',
      top: '140rpx'
    }],
    skills: [],
    hire: undefined,
    jobs: [],
    userid: undefined,
    presetOid: null
  }
  methods = {
    edit() {
      wx.navigateTo({
        url: 'edit-resume'
      })
    },
    hire(e) {
      let oid
      if (e.detail.value) {
        oid = this.jobs[e.detail.value].id
      } else {
        oid = this.presetOid
      }
      if (oid === null || oid === undefined) {
        wx.showToast({
          icon: 'none',
          title: '服务器错误，无法拿到职位id'
        })
        return
      }
      const uid = this.info.userid
      wx.showModal({
        title: '提示',
        content: '您确定招募该员工吗？',
        success (res) {
          if (res.confirm) {
            hire({
              oid,
              uid,
              status: 1
            }).then(data => {
              if (data.code === 0) {
                setTimeout(wx.navigateBack, 1000)
              }
            })
          }
        }
      })
    },
  }
  draw(values) {
    console.log(values)
    _draw(5, 5, values, this.labels)
    function _draw (side, part, values, labels) {
      let context = wx.createCanvasContext('firstCanvas')
      const {screenWidth} = wx.getSystemInfoSync()
      let [width, height] = [screenWidth / 750 * 320, screenWidth / 750 * 320]
      let xCenter = width * 0.5
      let yCenter = height * 0.5
      let radius = width * 0.5
      let space = radius / part
      let theta = Math.PI * 2 / side

      context.translate(-20 * screenWidth / 375, 28 * screenWidth / 375)
      context.rotate(-17 * Math.PI / 180)

      // 绘制能力多边形
      context.beginPath()
      for (let i = 0; i <= side; i++) {
        let x = Math.cos(i * theta) * radius * values[i % side] + xCenter
        let y = -Math.sin(i * theta) * radius * values[i % side] + yCenter
        context.lineTo(x, y)
      }
      context.setFillStyle('#badff5')
      context.fill()
      context.closePath()

      // 绘制渐变多边形底层
      for (let j = part; j >= 1; j--) {
        context.beginPath()
        for (let i = 0; i <= side; i++) {
          context.lineTo(Math.cos(i * theta) * space * j + xCenter, -Math.sin(i * theta) * space * j + yCenter)
        }
        context.setLineWidth(0.3)
        context.setFillStyle('#cccccc')
        context.stroke()
        context.closePath()
      }

      for (let j = part; j > 1; j--) {
        for (let i = 0; i < side; i++) {
          if (j === part) {
            context.beginPath()
            context.moveTo(xCenter, yCenter)
            context.lineTo(Math.cos(i * theta) * space * j + xCenter, -Math.sin(i * theta) * space * j + yCenter)
            context.stroke()
            context.closePath()
          }
        }
      }
      // context.rotate(17 * Math.PI / 180)
      context.draw()
    }
  }
  onLoad({hire, userid, oid}) {
    this.userid = userid
    this.presetOid = oid || null
    console.log(hire, userid, 'onload')
    getResume(userid).then(res => {
      this.handleResume(res.data || {})
    })
    if (hire) {
      this.hire = true
      this.$apply()
      getJobListPersonally().then(res => {
        Array.isArray(res.data) && res.data.forEach(row => {
          row.date = (row.updatetime || row.updateat || row.createat || row.creationtime).substr(5, 5)
          row.avatar = row.img
        })
        this.jobs = res.data
        this.$apply()
      })
    }
    eventEmitter.on('update-resume', () => {
      getResume(userid).then(res => {
        this.handleResume(res.data || {})
      })
    })
  }
  handleResume(data) {
    data.hope = (data.workday || '').split(',')
    this.days = []
    for (let i = 1; i <= 7; i++) {
      this.days.push({
        day: i,
        highlight: data.hope.indexOf(i.toString()) !== -1
      })
    }
    this.skills = data.ability || []
    const info = this.info = data || {}
    const values = []
    values.push((info.efficiency || 0) / 5)
    values.push((info.honest || 0) / 5)
    values.push((info.workstatus || 0) / 5)
    values.push((info.major || 0) / 5)
    values.push((info.communication || 0) / 5)
    this.draw(values)
    this.$apply()
  }
}
</script>

<style lang='scss'>
page {
  background: #f5f5f4;
  font-size: 28rpx;
  color: #000;
  padding: 0 32rpx;
  padding-bottom: 108rpx;
}
.avatar-wrapper {
  position: absolute;
  top: 36rpx;
  width: 85rpx * 2 + 40rpx;
  height: 240rpx + 20rpx;
  left: (750rpx - 180rpx - 32rpx) / 2;
  display: flex;
  justify-content: center;
  align-items: center;
  background: #fff;
  .avatar {
    width: 170rpx;
    height: 240rpx;
  }
}
.info-wrapper {
  padding-bottom: 16rpx;
  margin-top: 210rpx;
  padding-top: 90rpx;
  box-sizing: border-box;
  width: 750rpx - 64rpx;
  background: #fff;
  border-radius: 8rpx;
  .block {
    text-align: center;
  }
  .flex {
    display: flex;
    justify-content: space-between;
    padding: 6rpx 30rpx;
    .flex-left {
      width: 42%;
    }
    .flex-right {
      width: 58%;
    }
    .text-item {
      image {
        width: 48rpx;
        height: 48rpx;
        vertical-align: middle;
        margin-right: 12rpx;
      }
    }
  }
  .text-wrapper {
    margin: 0 auto;
    width: 280rpx;
    border-bottom: 1rpx solid #f0f0f0;
    padding-bottom: 12rpx;
    text-align: center;
  }
  .hope {
    font-size: 28rpx;
  }
  .day-wrapper {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 20rpx 90rpx;
    border-bottom: 1px solid #f0f0f0;
    text {
      font-size: 32rpx;
      width: 32rpx;
      height: 32rpx;
      line-height: 32rpx;
      &.highlight {
        border: 1rpx solid #37A9ED;
        border-radius: 50%;
        text-align: center;
        line-height: 32rpx;
        color: #37A9ED;
      }
    }
  }
}
.block-wrapper {
  margin-top: 16rpx;
  padding: 20rpx 60rpx;
}
.absolute {
  color: #888;
  position: absolute;
}
.skill {
  margin: 10rpx 0;
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.footer-wrapper {
  position: fixed;
  left: 0;
  background: #fff;
  bottom: 0;
  box-sizing: border-box;
  width: 750rpx;
  height: 100rpx;
  display: flex;
  padding: 0 40rpx;
  align-items: center;
  justify-content: center;
  z-index: 10000;
  button {
    height: 74rpx;
    font-size: 24rpx;
    line-height: 74rpx;
    color: #37A9ED;
  }
  .primary {
    color: #fff;
    flex: 1;
  }
}
</style>
